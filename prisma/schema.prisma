// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl   = env("DIRECT_URL")
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  username      String?    @unique
  grandId       String?
  grantEmail    String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
   availability   Availability[]
  eventType  EventType[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

model Availability{
  id          String  @id @default(uuid())
  day         Day
  fromtime    String
  tillTime    String
  isActive   Boolean  @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
 
   user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
   user_id     String
  // availability  DateTime?
  
}
enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

// Optional for WebAuthn support
model EventType{
  id                           String  @id  @default(cuid())
  title                       String    
  duration                     Int
  url                            String
  active                        Boolean @default(true)
  description                  String
  videoCallingSoftware          String @default("Google Meet")
  createdAt                       DateTime  @default(now())
  user                     User? @relation(fields: [user_Id] , references: [id])
  user_Id                   String

  
}